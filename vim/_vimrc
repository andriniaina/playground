" -----------------------------------------------------------------------------  
" |                            VIM Settings                                   |
" |                   (see gvimrc for gui vim settings)                       |
" |                                                                           |
" | Some highlights:                                                          |
" |   jj = <esc>  Very useful for keeping your hands on the home row          |
" |   ,n = toggle NERDTree off and on                                         |
" |                                                                           |
" |   ,f = fuzzy find all files                                               |
" |   ,b = fuzzy find in all buffers                                          |
" |                                                                           |
" |   hh = inserts '=>'                                                       |
" |   aa = inserts '@'                                                        |
" |                                                                           |
" |   ,h = new horizontal window                                              |
" |   ,v = new vertical window                                                |
" |                                                                           |
" |   ,i = toggle invisibles                                                  |
" |                                                                           |
" |   enter and shift-enter = adds a new line after/before the current line   |
" |                                                                           |
" |   :call Tabstyle_tabs = set tab to real tabs                              |
" |   :call Tabstyle_spaces = set tab to 2 spaces                             |
" |                                                                           |
" | Put machine/user specific settings in ~/.vimrc.local                      |
" -----------------------------------------------------------------------------  


set nocompatible
if hostname() == "Heri-3.local"
	let mapleader = "`"
else
	let mapleader = "²"
endif
set bufhidden=unload
set shellslash


" -----------------------------------------------------------------------------  
" |                              Plug-ins                                     |
" -----------------------------------------------------------------------------  

set rtp+=~/.fzf
runtime mswin.vim

call plug#begin('~/vim-plug')
Plug 'junegunn/fzf.vim'
Plug 'vim-scripts/syntastic'
Plug 'vim-scripts/AutoComplPop'
Plug 'vim-scripts/LargeFile'
Plug 'vim-scripts/L9'
Plug 'vim-scripts/vbnet.vim'
Plug 'vim-scripts/bclear'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/vim-less'
Plug 'plasticboy/vim-markdown'
Plug 'vim-scripts/EnhCommentify.vim'
call plug#end()

if filereadable(expand("$VIMRUNTIME/macros/matchit.vim"))
	source $VIMRUNTIME/macros/matchit.vim
endif




" Tabs ************************************************************************
"set sta " a <Tab> in an indent inserts 'shiftwidth' spaces

" view diffs between current buffer and version on disk
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
command -bar SqlComplete exe 'silent! DBCompleteProcedures' | exe 'silent! DBCompleteTables'
set diffopt=filler,iwhite

" see tidy.vim
command! -range=% TidySQL <line1>,<line2>call TidySQL()
command! -range=% TidyXml <line1>,<line2>call TidyXml()
command! TidyHtml call TidyHtml()
command! TidyHtml5 call TidyHtml5()

function! Tabstyle_tabs(width)
  exec "set softtabstop="  . a:width
  exec "set shiftwidth="   . a:width
  exec "set tabstop="      . a:width
  set noexpandtab
endfunction

function! Tabstyle_spaces(width)
  exec "set softtabstop="   . a:width
  exec "set shiftwidth="    . a:width
  exec "set tabstop="       . a:width
  set expandtab
endfunction

function! Tabstyle_tabs_local(width)
  exec "setlocal softtabstop="  . a:width
  exec "setlocal shiftwidth="   . a:width
  exec "setlocal tabstop="      . a:width
  setlocal noexpandtab
endfunction

function! Tabstyle_spaces_local(width)
  exec "setlocal softtabstop=" . a:width
  exec "setlocal shiftwidth="  . a:width
  exec "setlocal tabstop="     . a:width
  setlocal expandtab
endfunction

" default to tabs
call Tabstyle_tabs(4)

command Scratch enew | set buftype=nofile | set bufhidden=hide | setlocal noswapfile

" Indenting *******************************************************************
set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent	(local to buffer)


" Scrollbars ******************************************************************
set sidescrolloff=2
set numberwidth=4
" set fdc=2

" Windows *********************************************************************
set noequalalways " keep window size after bufclose
set splitbelow splitright

"Vertical split then hop to new buffer
noremap <Leader>v :vsp +enew<cr>
noremap <Leader>h :split +enew<cr>


" Cursor highlights ***********************************************************
set cursorline
"set cursorcolumn


" Searching *******************************************************************
set hlsearch  " highlight search
set incsearch  " incremental search, search as you type
set ignorecase " Ignore case when searching 
set smartcase " Ignore case when searching lowercase

nnoremap / :set incsearch \| set wrapscan<Cr>/
nnoremap <C-h> :%s/
vnoremap <C-h> :s/
vnoremap / :<c-u>set noincsearch \| set nowrapscan<Cr>gv/\%>'<\%<'>

" Colors **********************************************************************
"set t_Co=256 " 256 colors
syntax on " syntax highlighting
if &t_Co=="" || &t_Co>=128
	set background=light
	colorscheme bclear
else
	set t_Co=16
	set background=dark
endif


" Status Line *****************************************************************
set showcmd
set ruler " Show ruler
set statusline=%F%M

" Status vim-airline *****************
set laststatus=2
"set ch=2 " Make command line two lines high
let g:airline#extensions#tabline#enabled = 1

" Line Wrapping ***************************************************************
set nowrap
set linebreak  " Wrap at word

" virtual edit : go beyond the new line character
set virtualedit+=block


" Mappings ********************************************************************


" Directories *****************************************************************
" Setup backup location and enable
"set backupdir=~/backup/vim
"set backup


" Sets path to directory buffer was loaded from
" autocmd BufEnter * lcd %:p:h
set autochdir
"set clipboard=unnamed	" use different clipboard for vim yanks and windows copy
set fillchars+=diff:\ 

" force utf-8 and compatible font(?)
set encoding=utf-8

" File Stuff ******************************************************************
filetype plugin indent on
" To show current filetype use: set filetype
au BufRead,BufNewFile *.htc            set filetype=html
au BufRead,BufNewFile *.cls,*.ctl      set filetype=vb
au BufRead,BufNewFile *.log            set filetype=log
au BufRead,BufNewFile *.xaml           set filetype=xml
au BufRead,BufNewFile *.edi            set filetype=edifact
au BufRead,BufNewFile *.vb             set filetype=vbnet
au FileType vbnet                      set foldmethod=syntax
au BufRead,BufNewFile *.fsx,*.fs       set filetype=fs
au FileType fs                         call Tabstyle_spaces_local(2)
au FileType python                     call Tabstyle_spaces_local(2)
au FileType mkd                        call Tabstyle_spaces_local(4)    " markdown


"autocmd FileType html :set filetype=xhtml


" Insert New Line **************************************************************
nnoremap <S-Enter> O<ESC> " awesome, inserts new line without going into insert mode
nnoremap <Enter> o<ESC>
" set fo-=r " do not insert a comment leader after an enter, (no work, fix!!)
nnoremap <BS> X
nnoremap <Space> a<Space><Esc>
nnoremap <C-S-Down> :m +1<Cr>
nnoremap <C-S-Up> :m -2<Cr>


" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize


" Misc ************************************************************************
set backspace=indent,eol,start
set number " Show line numbers
set matchpairs+=<:>
  " set visual bell off
set vb t_vb=


" Invisible characters *********************************************************
set listchars=trail:.,tab:»\ ,eol:¶
set nolist
noremap <Leader>i :set list!<CR> " Toggle invisible chars

" Mouse ***********************************************************************
set mouse=a " Enable the mouse
behave xterm
"set selectmode=mouse


" Cursor Movement *************************************************************
" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
" map k gk
imap <up> <C-o>gk
map <down> gj
"map j gj
imap <down> <C-o>gj

inoremap <S-Right> <Esc>vl
inoremap <S-Left> <Esc>vh
inoremap <C-S-Right> <Esc>vw
inoremap <C-S-Left> <Esc>v<S-Left>

nnoremap <C-Left> b
nnoremap <C-Right> w

noremap <F12> <Esc>:reg<Cr>
inoremap <F12> <C-o>:reg<Cr>
" see plugin\Fullscreen.vim
noremap <F11> :call ToggleFullscreen()<Cr>


" Ruby stuff ******************************************************************
"compiler ruby         " Enable compiler support for ruby
"map <F5> :!ruby %<CR>


" Omni Completion *************************************************************
autocmd FileType html :set omnifunc=htmlcomplete#CompleteTags
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
" May require ruby compiled in
" autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete 


" NERDTree ********************************************************************


" SnippetsEmu *****************************************************************


" Toggle wrap
noremap <Leader>w <Esc>:set wrap!<CR>

" netrw Explore tree 
let g:netrw_winsize = 85
noremap <Leader>e :let g:netrw_sort_by="time" \| let g:netrw_sort_direction="reverse" \|  Vexplore!<CR>

" Fuzzy finder
let g:fuf_modesDisable = [ 'mrucmd', ]
" let g:fuf_mrufile_maxItem = 50
noremap <Leader><Tab> :bnext<CR>
noremap <Leader><S-Tab> :bprevious<CR>
noremap <Leader>ff :FufFile<CR>
noremap <Leader>fb :FufBuffer<CR>
noremap <Leader>fr :FufMruFile<CR>
noremap <Leader>fm :FufBookmarkFile<CR>
noremap <F3> :FufBookmarkFileAdd<CR>
vnoremap <F3> :FufBookmarkFileAddAsSelectedText<CR><CR>

" Tab indents selected line in visual mode
"" Indent selected lines
nnoremap <Tab> >l
vnoremap <Tab> >gv
"" Unindent selected lines
nnoremap <S-Tab> <l<Esc>
vnoremap <S-Tab> <gv

" autocomplpop ***************************************************************
" complete option
"set complete=.,w,b,u,t,k
"let g:AutoComplPop_CompleteOption = '.,w,b,u,t,k'
"set complete=.
let g:AutoComplPop_IgnoreCaseOption = 1
let g:AutoComplPop_BehaviorKeywordLength = 4
let g:EnhCommentifyBindInInsert = 'No'


" wild mode autocompletion (file autocompletion navigation in command mode with <tab> )
set wildmenu



" -----------------------------------------------------------------------------  
" |                             OS Specific                                   |
" |                      (GUI stuff goes in gvimrc)                           |
" -----------------------------------------------------------------------------  

" Mac *************************************************************************
" Windows *********************************************************************
if has("gui_win32")
	" Set Swap directory
	set directory=~/.swap_dir
endif

" persistent undo
if has("persistent_undo")
	set undodir=~/.undo_dir
	if !isdirectory(&undodir)
		call mkdir(&undodir)
	end
    set undofile
endif




" -----------------------------------------------------------------------------  
" |                               Host specific                               |
" -----------------------------------------------------------------------------  
"if filereadable(expand("~/.vimrc.local"))
"  source ~/.vimrc.local
"endif

"if hostname() == "foo"
  " do something
"endif
